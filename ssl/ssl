#!/bin/bash

# Copyrigth (C) 2015 Michael Hauspie <michael.hauspie@univ-lille1.fr>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# config values


# Read values from config file
test -f $HOME/.sslstorerc && . $HOME/.sslstorerc

# Defaults
# For each CA managed, all data needed will be stored in a subfolder of this one, named after the ca name
ssl_store_folder=${ssl_store_folder:-${HOME}/.ssl-store}
ca_validity_days=${ca_validity_days:-3650}
cert_validity_days=${cert_validity_days:-365}

if ! [ -z "$SSL_STORE_FOLDER" ]
then
    ssl_store_folder="$SSL_STORE_FOLDER"
fi

# version
version=0.1


version()
{
    cat <<EOF
ssl-store ${version}
Copyright (C) 2015 MichaÃ«l Hauspie
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
}

help()
{
    exec 1>&2
    version 
    cat <<EOF

Usage:
    $0 help
              Displays this help message.
    $0 version
              Displays the version of this script.
    $0 init
              Initialize new ssl storage. If git command is installed,
              it will initialize it as a git repository.
    $0 [ls] [-v]
              List managed CA. With -v, also lists certificates for
              each CA.
    $0 ca [caname]
              Creates a new CA.
    $0 gencert [certfqdn [caname]]
              Creates a new certification for a given fqdn signed by a
              managed CA.
    $0 cert [certfqdn]
              Outputs a certificate.
    $0 cacert [caname]
              Outputs a CA's certificate.
    $0 key [certfqdn]
              Outputs the private key of a fqdn certificate.
    $0 cakey [caname]
              Outputs the private key of a CA.
    $0 git git-args...
              Runs the git command in the store folder.

EOF
}

# Utility functions follow
# Outputs an error message on stderr after the help message
fail()
{
    exec 1>&2
    help
    echo "" 
    echo $* 
    exit 1
}

# Lists all the CA managed in the store
list_ca()
{
    ls ${ssl_store_folder}
}

# Generate a temporary config file for openssl
# from a template.
# $1: template file
# $2: commonName to use in the req section
gen_cnf()
{
    local cnffile="$1"
    local CN="$2"
    local tmpfile=`mktemp`
    cat ${cnffile} | sed "s/@@CN@@/$CN/" > $tmpfile
    echo $tmpfile
}

# Executes a git command in the store folder, only if git command is
# available, otherwise fails silently
git_exec()
{
    which git >& /dev/null || return 0
    git -C "${ssl_store_folder}" "$@"
}

# Extract the fqdn from a certificate pem file
# $1: path to .pem file
get_fqdn_from_cert()
{
    local cert="$1"
    openssl x509 -subject -in "$1" -out /dev/null | sed -e 's@.*/CN=@@'
}

# Outputs all the fqdn private keys paths for a given CA
# $1: the ca
get_key_from_ca()
{
    local ca="$1"
    ls ${ssl_store_folder}/$ca/private/*-key.pem 2> /dev/null
}

# Outputs all the fqdn certificates file paths for a given CA
# $1: the ca
get_pem_from_ca()
{
    local ca="$1"
    ls ${ssl_store_folder}/$ca/certs/*.pem 2> /dev/null
}

# Outputs all the fqdn generated from a given CA
# $1: the ca
get_fqdns_from_ca()
{
    local ca="$1"
    local fqdns=""
    for cert in `get_pem_from_ca $ca`
    do
        fqdn=`get_fqdn_from_cert $cert`
        fqdns="$fqdns $fqdn"
    done
    test -z "$fqdns" && return 1
    echo $fqdns
}

# Outputs file paths for all the certificates managed in the store
get_pem_files()
{
    for ca in `list_ca`
    do
        get_pem_from_ca $ca
    done
}

# Outputs file paths for all the privates keys (except the ca key)
# managed in the store
get_key_files()
{
    for ca in `list_ca`
    do
        get_key_from_ca $ca
    done        
}

# Outputs a certificate from its path
# $1: path to the pem file
output_cert()
{
    local cert="$1"
    openssl x509 -in "$1"
}

# Outputs the file path of the private key of a given fqdn.
# Only works well if the fqdn exists only once in the store
# $1: the fqdn
fqdn_to_key()
{
    local fqdn="$1"

    for ca in `list_ca`
    do
        if [ -f ${ssl_store_folder}/$ca/private/${fqdn}-key.pem ]
        then
            echo ${ssl_store_folder}/$ca/private/${fqdn}-key.pem
            return 0
        fi
    done
    return 1
}

# Outputs the file path of the certificate file for a given fqdn.
# Only works well if the fqdn exists only once in the store
# $1: the fqdn
fqdn_to_pem()
{
    local fqdn="$1"
    for pem in `get_pem_files`
    do
        if [ "`get_fqdn_from_cert $pem`" = "$fqdn" ]
        then
            echo $pem
            return 0
        fi
    done
    return 1
}


# returns true if a given fqdn is actually managed by the store
# $1: fqdn
check_fqdn()
{
    test -z "$1" && return 1
    # protect *... should probably protect more, but * and . is
    # likely to be present in a fqdn
    local fqdn=`echo $1 | sed -e 's/\*/\\\\*/g' -e 's/\./\\\\./g'`
    for ca in `list_ca`
    do
        pattern="(^|\s)$fqdn(\s|\$)"
        (get_fqdns_from_ca $ca | egrep -q "$pattern") && return 0
    done
    return 1
}

# Outputs a valid fqdn (i.e. which is actually managed in the store)
# First tries its first parameter and if not good (or not provided)
# asks the user for a valid fqdn
# $1: a fqdn (can be empty)
safe_get_fqdn()
{
    local fqdn="$1"
    if check_fqdn "$fqdn"
    then
        echo "$fqdn"
        return 0
    fi
    # fqdn is invalid, propose a list
    # Retrieve available fqdns
    local -A pems
    for pem in `get_pem_files`
    do
        pemfqdn=`get_fqdn_from_cert $pem`
        pems["$pemfqdn"]=$pem
    done
    if [ -z "${!pems[@]}" ]
    then
        fail "No fqdn in the store"
        exit 1
    fi
    # If none provided, ask for one
    PS3="Select FQDN> "
    select fqdn in ${!pems[@]}
    do
        test -z "$fqdn" || break
    done
    echo "$fqdn"
}

# Outputs a valid CA (i.e. which is actually managed in the store)
# First tries its firt parameter and if not good (or not provided)
# Asks the user for a valid ca
# $1: a ca name (can be empty)
safe_get_ca()
{
    local ca="$1"
    if [ ! -z "$ca" -a -d ${ssl_store_folder}/$ca ]
    then
        echo "$ca"
        return 0
    fi
    if ! ls ${ssl_store_folder}/* >& /dev/null
    then
        fail "No CA in the store"
        exit 1
    fi
    PS3="Select CA> "
    select ca in `list_ca`
    do
        test -z "$ca" || break
    done
    echo "$ca"
}

cmd_debug()
{
    safe_get_ca "$1"
    exit $?
}

cmd_usage()
{
    help
}

cmd_init()
{
    if [ -d "${ssl_store_folder}" ]
    then
        echo "${ssl_store_folder} already exists, please remove if you really want to init a new" 1>&2
        exit 1
    fi
    mkdir -p "${ssl_store_folder}"
    git_exec init
    echo '*.old' > "${ssl_store_folder}/.gitignore"
    git_exec add .gitignore
    git_exec commit -m "Initialised SSL store"
    exit 0
}

cmd_version()
{
    version
}


cmd_ca()
{
    local caname="$*"
    if [ -z "$caname" ]
    then
        echo "Enter a name for your new CA"
        read caname
    fi
    # check for existence
    local cafolder="${ssl_store_folder}/$caname"
    if [ -d "$cafolder" ]
    then
        echo "CA $caname already exists" 1>&2
        exit 1
    fi

    mkdir -p "$cafolder"
    echo 1000 > "$cafolder/serial"
    touch "$cafolder/certindex.txt"
    mkdir -p "$cafolder/certs"
    touch "$cafolder/certs/.placeholder"
    mkdir -p "$cafolder/private"
    echo "What is the name of the service using this CA [${caname}]?"
    read caservice
    if [ -z "$caservice" ]
    then
        caservice=$caname
    fi
    echo "What is your country (2 letters internaltional code)?"
    read cacountry
    echo "What is your state or province?"
    read castate
    echo "What is your city?"
    read cacity
    echo "What is the email adresse of the administrator of this CA?"
    read caemail
    
    # Creates configuration file template for openssl
    cat > "$cafolder/ca.cnf" <<EOF
#
# OpenSSL configuration file.
#
 
# Establish working directory.
 
dir					= $cafolder
 
[ ca ]
default_ca				= CA_default
 
[ CA_default ]
serial					= \$dir/serial
database				= \$dir/certindex.txt
new_certs_dir				= \$dir/certs
certificate				= \$dir/cacert.pem
private_key				= \$dir/private/cakey.pem
default_md				= sha1
preserve				= no
email_in_dn				= no
nameopt					= default_ca
certopt					= default_ca
policy					= policy_match
 
[ policy_match ]
countryName				= match
stateOrProvinceName			= match
organizationName			= match
organizationalUnitName			= optional
commonName				= supplied
emailAddress				= optional
 
[ req ]
default_bits				= 4096
default_keyfile				= key.pem
default_md				= sha1
string_mask				= default
prompt                                  = no
distinguished_name			= req_distinguished_name
default_keyfile                         = \$dir/private/cakey.pem


 
[ req_distinguished_name ]
organizationName		        = ${caname}
organizationalUnitName		        = ${caservice}
localityName		   	        = ${cacity}
stateOrProvinceName        		= ${castate}
countryName        			= ${cacountry}
emailAddress        			= ${caemail}
commonName                              = @@CN@@

# For CA generation 
[ v3_ca ]
basicConstraints			= CA:TRUE
subjectKeyIdentifier			= hash
authorityKeyIdentifier			= keyid:always,issuer:always
 
# For certs generation
[ v3_req ]
basicConstraints			= CA:FALSE
subjectKeyIdentifier			= hash

EOF
    # Generate specific cnf file for CA (changes the commonName attribute)
    cnf=`gen_cnf "${cafolder}/ca.cnf" "${caname}"`
    openssl req -batch -new -x509 -extensions v3_ca -days ${ca_validity_days} -out "${cafolder}/cacert.pem" -config "${cnf}"
    rm -f ${cnf}
    # All goes well, adds to git
    git_exec add "${cafolder}/ca.cnf" "${cafolder}/certindex.txt" "${cafolder}/certs/.placeholder" "${cafolder}/serial" "${cafolder}/cacert.pem" "${cafolder}/private/cakey.pem"
    git_exec commit -m "Added CA ${caname}"
    exit 0
}


cmd_gencert()
{
    local fqdn="$1"
    shift
    local cname="$*"
    while [ -z "$fqdn" ]
    do
        echo "Enter the FQDN of the certificate to generate (e.g. host.domain.name)"
        read fqdn
    done
    local cname=`safe_get_ca "$cname"`
    test -z "$cname" && exit 1
    local cafolder="${ssl_store_folder}/${cname}"
    # Generate specific cnf file for certificate (changes the commonName attribute)
    local cnf=`gen_cnf "${cafolder}/ca.cnf" "${fqdn}"`
    local req="${cafolder}/certs/$fqdn-req.pem"
    local key="${cafolder}/private/$fqdn-key.pem"
    local cert="${cafolder}/certs/$fqdn-cert.pem"
    # Emit signature request for the new certificate
    openssl req -batch -new -nodes -out "$req" -keyout "$key" -config "$cnf"
    # Sign the certificate with the CA
    openssl ca -batch -days ${cert_validity_days} -config "$cnf" -infiles "$req"
    # Removes the req file
    rm -f "$req"
    # Removes the temp cnf
    rm -f "$cnf"
    # Git add everything
    local cert_file=`cat "$cafolder/certindex.txt" | tail -1 | awk '{print \$3;}'`
    git_exec add "$key" "$cafolder/certs/${cert_file}.pem" "$cafolder/serial" "$cafolder/certindex.txt" "$cafolder/certindex.txt.attr"
    git_exec commit -m "Adds certificate $fqdn to CA $cname"
    exit 0
}


cmd_cert()
{
    local fqdn=`safe_get_fqdn "$1"`
    test -z "$fqdn" && exit 1
    local pem=`fqdn_to_pem "$fqdn"`
    output_cert "$pem"
    exit $?
}

cmd_key()
{
    local fqdn=`safe_get_fqdn "$1"`
    test -z "$fqdn" && exit 1
    fqdn_key_file=`fqdn_to_key $fqdn`

    cat $fqdn_key_file
}

cmd_cacert()
{
    local ca=`safe_get_ca "$1"`
    test -z "$ca" && exit 1
    output_cert ${ssl_store_folder}/$ca/cacert.pem
}

cmd_cakey()
{
    local ca=`safe_get_ca "$1"`
    test -z "$ca" && exit 1
    cat ${ssl_store_folder}/$ca/private/cakey.pem
}

cmd_git()
{
    git_exec "$@"
}

cmd_ls()
{
    verbose="$1"
    echo "Available CA in store:"
    for ca in `list_ca`
    do
        echo $ca
        if [ "$verbose" = "-v" ]
        then
            for fqdn in `get_fqdns_from_ca $ca`
            do
                echo "  $fqdn"
            done
        fi
    done
    exit 0
}

# Sets a paranoid umask for this script
umask 077

case "$1" in
    init) shift;               cmd_init "$@";;
    help|-h|--help) shift;     cmd_usage "$@";;
esac

if ! [ -d "${ssl_store_folder}" ]
then
    fail "You must first call $0 init command"
fi
    
case "$1" in
    version|--version) shift;  cmd_version "$@";;
    ca) shift;                 cmd_ca "$@";;
    gencert) shift;            cmd_gencert "$@";;
    cert) shift;               cmd_cert "$@";;
    key)  shift;               cmd_key "$@";;
    git)  shift;               cmd_git "$@";;
    debug) shift;              cmd_debug "$@";;
    cacert) shift;             cmd_cacert "$@";;
    cakey) shift;              cmd_cakey  "$@";;
    ls)   shift;               cmd_ls  "$@";;
    *)                         cmd_ls  "$@";;
esac
exit 0        
